# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lNi03wCO9GuXp4y3GYUmghmEwWXQjWcy

#lambda( )
"""

def addition(a,b):
  return a + b

addition(7 ,9)

add = lambda a , b : a + b

print(add(7,9))

##example 1

num = int(input("Enter your number"))

def square(num):
  return num ** 2

square(num)

num = int(input("Enter your number :_"))

square = lambda num : num ** 2

print(square(num))

"""#filter ( )"""

number = [1,2,3,4,5,6]

even_number = list(filter(lambda a : a % 2 == 0, number))

even_number

## odd number

number = [1,2,3,4,5,6]

odd_number = list(filter(lambda a : a % 2 != 0, number))

odd_number

# positive number

number = [-10 , 20, -15, 78, -8, 8, -14]
positive_number = list(filter(lambda b :b > 0 , number))

negative_number = list(filter(lambda c: c < 0, number))

print(positive_number)

print(negative_number)

# filtering names starting with "A"

names = ['Anju', 'Harsh', 'Dipali', 'Ajay', 'Himanshu', 'Ashwini']

name_with_A = list(filter(lambda a : a.startswith("A"), names))

name_with_A

#filtering words longer than 3 character

words = ['apple', 'bat', 'cat', 'dog', 'tree', 'road']

long_words = list(filter(lambda x: len(x) > 3, words))

long_words

short_words = list(filter(lambda x: len(x) <= 3, words))

short_words

"""#map ( )"""

#squaring each number in list

number = [1 ,2,3,4,5]

square = list(map(lambda x : x ** 2, number))

square

#convert boolean into integer

booleans = [ True, False, True, True, False]

int_value = list(map(int , booleans))

int_value

type(int_value)

"""#strings methods"""

text = "Hello Happy Diwali"

len(text)

num = 123456789

str(num)

text

text.lower()

text.upper()

text.capitalize()

text

text2 = text.lower()

text2

text.upper()

text2.title()

text.swapcase()

# . find()

text = "Hello Dipali and Harsh"

text.find("Dipali")

text.rfind("D")

#replace

text

text.replace("and", "&")

#split and join

text

text.split()

text2 = text.split()

text2

words = ["Hello", "world"]

words

print(" ".join(words))

text

text.isalpha()

text = "Hello1234"

text.isalnum()

text2 = "1324567897"

text2.isalnum()

text2 = "#$%$^%$&%$&%$&%$&%$&"

text2.isalnum()

text2 = "+ - * /"

text2.isalnum()

text

text = "Happy Diwali"

text.startswith("H")

text.endswith("i")

text.count("i")

"""#modules"""

import math

math.sqrt(16)

#alis

import math as m    #as is alis

m.sqrt(25)

from math import sqrt, pi

sqrt(25)

pi

from math import *    #* is use for ALL

sin(90)

#importing packages

import numpy as np

# !pip install numpy   # pip is use for install the libraries or packages1

# sumbmodule import

from datetime import datetime

datetime.now()

datetime.today()

from datetime import datetime, timedelta, date, time, timezone

"""#Standard libraries"""

import sys

sys.version

import os

os.getcwd()

"""Here's a practice set of 50 Python questions, moving from basic to intermediate level, across various topics. These questions include concepts such as lists, tuples, dictionaries, sets, operators, conditionals, functions, map, lambda, filter, and loops. They should be challenging enough to reinforce your studentsâ€™ understanding and help them practice writing clean, functional code.

---

### List & Tuple Operations
1. Write a program to find the sum and product of all elements in a list.
2. Create a list of numbers and sort it in descending order without using the `sort()` function.
3. Write a program that takes a list and returns the second smallest and second largest numbers.
4. Write a Python program to count the number of even and odd numbers in a list.
5. Given a list of numbers, write a program to remove all occurrences of a specific element.
6. Write a Python program to find the intersection of two lists.
7. Create a tuple from user input and find the maximum and minimum elements in it.
8. Given a tuple of numbers, create a new tuple with only the odd numbers.
9. Write a program that finds the length of a tuple without using `len()`.
10. Write a Python program to reverse the elements in a tuple.

### Set Operations
11. Write a program to find the union, intersection, and difference of two sets.
12. Write a Python program to check if two sets have any elements in common.
13. Given a set, write a Python program to remove a specified element.
14. Write a program to find the symmetric difference between two sets.
15. Write a Python program to count unique elements from a list using sets.

### Dictionary Operations
16. Write a Python program to find the sum of all values in a dictionary.
17. Create a dictionary where the keys are numbers from 1 to 5 and values are their squares.
18. Write a Python program to merge two dictionaries.
19. Given a dictionary, write a Python program to delete a specific key.
20. Write a Python program to find the key of the minimum value in a dictionary.

### Conditional Statements
21. Write a program that checks if a number is prime.
22. Create a Python program that categorizes a given number as positive, negative, or zero.
23. Write a program to check if a given year is a leap year.
24. Create a program to check if a string is a palindrome.
25. Write a Python program that prints the Fibonacci series up to a given number of terms.

### Functions (Including `map()`, `lambda`, `filter()`)
26. Write a function to calculate the factorial of a number.
27. Create a function that finds the maximum of three numbers.
28. Write a function to calculate the sum of elements in a list using `reduce()` and `lambda`.
29. Use `map()` and `lambda` to square every element in a list.
30. Write a Python program to filter out odd numbers from a list using `filter()` and `lambda`.

### Loops (For and While Loops)
31. Write a program to print all numbers between 1 and 100 that are divisible by 5.
32. Use a while loop to reverse a given number.
33. Write a Python program that generates a multiplication table for a given number.
34. Use nested loops to print a right-angled triangle pattern of asterisks (`*`).
35. Write a program to find the sum of the first N natural numbers using a loop.

### Intermediate Level Problems
36. Create a program that takes a string and counts the frequency of each character.
37. Write a program to check if a number is an Armstrong number.
38. Write a function that takes a list and returns a new list with duplicates removed.
39. Implement a Python function to sort a list of tuples based on the second element.
40. Write a program that finds the common elements in three lists.
41. Write a function that accepts a dictionary and returns a dictionary with keys and values swapped.
42. Create a Python program that calculates the GCD of two numbers.
43. Write a Python program to count the vowels in a given string.
44. Given two lists, create a dictionary where elements of the first list are keys and elements of the second list are values.
45. Write a Python program that removes all characters other than alphabets from a string.

### Bonus Challenges
46. Write a function that takes a list of numbers and returns the cumulative sum.
47. Create a function that accepts a string and returns the longest word in it.
48. Write a Python program that generates the first N terms of a Fibonacci sequence using a loop.
49. Create a program that calculates the sum of all prime numbers below a given limit.
50. Write a Python program that finds the first non-repeating character in a string.


"""



