# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k7p0SXsyqAcEYNROrSnGFLSgqNJvk8y8

Data Visualization With Matplotlib
Matplotlib is a powerful plotting library for Python that enables the creation of static, animated, and interactive visualizations. It is widely used for data visualization in data science and analytics. In this lesson, we will cover the basics of Matplotlib, including creating various types of plots and customizing them.
"""

!pip install matplotlib

import matplotlib as plt

#LINE PLOT

x = [1,2,3,4,5]
y = [10,20,25,30,40]

plt.plot(x, y)  # Plot the chart
plt.title("Line Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.grid(True)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt    #%matplotlib use for to show plot directly

x = [ 1,2,3,4,5]
y = [1,4,9,16,25]

plt.plot(x , y, color ="red", linestyle = "--", marker ='o', linewidth = 3, markersize = 9)
plt.grid(True)

x

y

z =[21,24,25,23,54]

plt.figure(figsize=(9, 9))

plt.subplot(2,2,1)
plt.plot(x, y, color ='green')
plt.title("Plot 1")

plt.subplot(2,2,2)
plt.plot(y, x, color ='red')
plt.title("Plot2")

plt.subplot(2,2,3)
plt.plot(x, z, color ='blue')
plt.title("Plot 3")

plt.subplot(2,2,4)
plt.plot(y, z, color ='orange')
plt.title("Plot4")

#Bar plot

v1 = ['A', 'B', 'C', 'D', 'E']
v2= [5,7,3,8,2]

plt.bar(v1, v2, color ='purple', edgecolor='black')
plt.xlabel('Categories')
plt.ylabel('Values')
plt.title('Bar Plot')

#histogram - use for to check distrubution of the data

data = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]

plt.hist(data, bins = 5, color ='orange', edgecolor ='black')

x

y

plt.scatter(x,y, color ='blue', marker ='x')

#pie graph

v1 =['A','B','C','D']

v2 = [30,20,40,10]

plt.pie(v2,labels =v1, explode=(0.1, 0.1,0.1,0.1), colors= ['gold', 'yellowgreen', 'lightskyblue', 'lightcoral'],  autopct= '%1.1f%%',shadow=True)

#heatmap

import numpy as np

data = np.random.rand(10,10)
plt.imshow(data, cmap='viridis')
plt.colorbar()
plt.savefig('my_plot.png', dpi=300, bbox_inches ='tight')

#saving figure

plt.savefig('my_plot.png', dpi=300, bbox_inches ='tight')

#animations plot

import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

fig, ax = plt.subplots()
x = np.linspace(0, 2*np.pi, 128)
line, = ax.plot(x, np.sin(x))

def update(frame):
    line.set_ydata(np.sin(x + frame/10))
    return line,

ani = animation.FuncAnimation(fig, update, frames=100, interval=50)
plt.show()

